/*
 * This file is generated by jOOQ.
 */
package ndbconn;


import java.util.Arrays;
import java.util.List;

import ndbconn.tables.Datanames;
import ndbconn.tables.Floatdata;
import ndbconn.tables.Int16data;
import ndbconn.tables.Int32data;
import ndbconn.tables.Int8data;
import ndbconn.tables.Packets;
import ndbconn.tables.Sessions;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Newf1db extends SchemaImpl {

    private static final long serialVersionUID = -396041283;

    /**
     * The reference instance of <code>NewF1DB</code>
     */
    public static final Newf1db NEWF1DB = new Newf1db();

    /**
     * A table to store different names of the data stored in the data table. 
     */
    public final Datanames DATANAMES = Datanames.DATANAMES;

    /**
     * A table to store data from UDP packets that have float type.
     */
    public final Floatdata FLOATDATA = Floatdata.FLOATDATA;

    /**
     * The table <code>NewF1DB.Int16Data</code>.
     */
    public final Int16data INT16DATA = Int16data.INT16DATA;

    /**
     * A table to store data from UDP packets that have int32 type.
     */
    public final Int32data INT32DATA = Int32data.INT32DATA;

    /**
     * The table <code>NewF1DB.Int8Data</code>.
     */
    public final Int8data INT8DATA = Int8data.INT8DATA;

    /**
     * A table to store common packet information, to avoid reductancy in data table. This table provides timestamp information for the user to reconstruct a complete session. 
     */
    public final Packets PACKETS = Packets.PACKETS;

    /**
     * Store session UID, to avoid duplicate values in table Packets. The user can join this table with the data table to filter data by sessions. 
     */
    public final Sessions SESSIONS = Sessions.SESSIONS;

    /**
     * No further instances allowed
     */
    private Newf1db() {
        super("NewF1DB", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.<Table<?>>asList(
            Datanames.DATANAMES,
            Floatdata.FLOATDATA,
            Int16data.INT16DATA,
            Int32data.INT32DATA,
            Int8data.INT8DATA,
            Packets.PACKETS,
            Sessions.SESSIONS);
    }
}
