/*
 * This file is generated by jOOQ.
 */
package ndbconn.tables;


import java.util.Arrays;
import java.util.List;

import ndbconn.Keys;
import ndbconn.Newf1db;
import ndbconn.tables.records.SessionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Store session UID, to avoid duplicate values in table Packets. The user 
 * can join this table with the data table to filter data by sessions. 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sessions extends TableImpl<SessionsRecord> {

    private static final long serialVersionUID = -455747614;

    /**
     * The reference instance of <code>NewF1DB.Sessions</code>
     */
    public static final Sessions SESSIONS = new Sessions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionsRecord> getRecordType() {
        return SessionsRecord.class;
    }

    /**
     * The column <code>NewF1DB.Sessions.idSession</code>.
     */
    public final TableField<SessionsRecord, Integer> IDSESSION = createField(DSL.name("idSession"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>NewF1DB.Sessions.sessionUID</code>.
     */
    public final TableField<SessionsRecord, Long> SESSIONUID = createField(DSL.name("sessionUID"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>NewF1DB.Sessions</code> table reference
     */
    public Sessions() {
        this(DSL.name("Sessions"), null);
    }

    /**
     * Create an aliased <code>NewF1DB.Sessions</code> table reference
     */
    public Sessions(String alias) {
        this(DSL.name(alias), SESSIONS);
    }

    /**
     * Create an aliased <code>NewF1DB.Sessions</code> table reference
     */
    public Sessions(Name alias) {
        this(alias, SESSIONS);
    }

    private Sessions(Name alias, Table<SessionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sessions(Name alias, Table<SessionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Store session UID, to avoid duplicate values in table Packets. The user can join this table with the data table to filter data by sessions. "), TableOptions.table());
    }

    public <O extends Record> Sessions(Table<O> child, ForeignKey<O, SessionsRecord> key) {
        super(child, key, SESSIONS);
    }

    @Override
    public Schema getSchema() {
        return Newf1db.NEWF1DB;
    }

    @Override
    public Identity<SessionsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SESSIONS;
    }

    @Override
    public UniqueKey<SessionsRecord> getPrimaryKey() {
        return Keys.KEY_SESSIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SessionsRecord>> getKeys() {
        return Arrays.<UniqueKey<SessionsRecord>>asList(Keys.KEY_SESSIONS_PRIMARY);
    }

    @Override
    public Sessions as(String alias) {
        return new Sessions(DSL.name(alias), this);
    }

    @Override
    public Sessions as(Name alias) {
        return new Sessions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(String name) {
        return new Sessions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(Name name) {
        return new Sessions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
