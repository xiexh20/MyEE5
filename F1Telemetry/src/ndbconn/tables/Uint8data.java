/*
 * This file is generated by jOOQ.
 */
package ndbconn.tables;


import java.util.Arrays;
import java.util.List;

import ndbconn.Indexes;
import ndbconn.Keys;
import ndbconn.Newf1db;
import ndbconn.tables.records.Uint8dataRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Uint8data extends TableImpl<Uint8dataRecord> {

    private static final long serialVersionUID = -141375207;

    /**
     * The reference instance of <code>NewF1DB.UInt8Data</code>
     */
    public static final Uint8data UINT8DATA = new Uint8data();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Uint8dataRecord> getRecordType() {
        return Uint8dataRecord.class;
    }

    /**
     * The column <code>NewF1DB.UInt8Data.idData</code>.
     */
    public final TableField<Uint8dataRecord, Integer> IDDATA = createField(DSL.name("idData"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>NewF1DB.UInt8Data.data</code>.
     */
    public final TableField<Uint8dataRecord, UByte> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "");

    /**
     * The column <code>NewF1DB.UInt8Data.dataName</code>.
     */
    public final TableField<Uint8dataRecord, Short> DATANAME = createField(DSL.name("dataName"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>NewF1DB.UInt8Data.packetId</code>.
     */
    public final TableField<Uint8dataRecord, Integer> PACKETID = createField(DSL.name("packetId"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>NewF1DB.UInt8Data.sessionId</code>.
     */
    public final TableField<Uint8dataRecord, Integer> SESSIONID = createField(DSL.name("sessionId"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>NewF1DB.UInt8Data</code> table reference
     */
    public Uint8data() {
        this(DSL.name("UInt8Data"), null);
    }

    /**
     * Create an aliased <code>NewF1DB.UInt8Data</code> table reference
     */
    public Uint8data(String alias) {
        this(DSL.name(alias), UINT8DATA);
    }

    /**
     * Create an aliased <code>NewF1DB.UInt8Data</code> table reference
     */
    public Uint8data(Name alias) {
        this(alias, UINT8DATA);
    }

    private Uint8data(Name alias, Table<Uint8dataRecord> aliased) {
        this(alias, aliased, null);
    }

    private Uint8data(Name alias, Table<Uint8dataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Uint8data(Table<O> child, ForeignKey<O, Uint8dataRecord> key) {
        super(child, key, UINT8DATA);
    }

    @Override
    public Schema getSchema() {
        return Newf1db.NEWF1DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.UINT8DATA_INT8TONAME_IDX, Indexes.UINT8DATA_INT8TOPACKET_IDX, Indexes.UINT8DATA_INT8TOSESSION_IDX);
    }

    @Override
    public Identity<Uint8dataRecord, Integer> getIdentity() {
        return Keys.IDENTITY_UINT8DATA;
    }

    @Override
    public UniqueKey<Uint8dataRecord> getPrimaryKey() {
        return Keys.KEY_UINT8DATA_PRIMARY;
    }

    @Override
    public List<UniqueKey<Uint8dataRecord>> getKeys() {
        return Arrays.<UniqueKey<Uint8dataRecord>>asList(Keys.KEY_UINT8DATA_PRIMARY);
    }

    @Override
    public List<ForeignKey<Uint8dataRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<Uint8dataRecord, ?>>asList(Keys.UINT8TONAME, Keys.UINT8TOPACKET, Keys.UINT8TOSESSION);
    }

    public Datanames datanames() {
        return new Datanames(this, Keys.UINT8TONAME);
    }

    public Packets packets() {
        return new Packets(this, Keys.UINT8TOPACKET);
    }

    public Sessions sessions() {
        return new Sessions(this, Keys.UINT8TOSESSION);
    }

    @Override
    public Uint8data as(String alias) {
        return new Uint8data(DSL.name(alias), this);
    }

    @Override
    public Uint8data as(Name alias) {
        return new Uint8data(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Uint8data rename(String name) {
        return new Uint8data(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Uint8data rename(Name name) {
        return new Uint8data(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, UByte, Short, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
