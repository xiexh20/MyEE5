/*
 * This file is generated by jOOQ.
 */
package ndbconn.tables.records;


import ndbconn.tables.Sessions;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Store session UID, to avoid duplicate values in table Packets. The user 
 * can join this table with the data table to filter data by sessions. 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionsRecord extends UpdatableRecordImpl<SessionsRecord> implements Record2<Integer, Long> {

    private static final long serialVersionUID = -1783314559;

    /**
     * Setter for <code>NewF1DB.Sessions.idSession</code>.
     */
    public void setIdsession(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>NewF1DB.Sessions.idSession</code>.
     */
    public Integer getIdsession() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>NewF1DB.Sessions.sessionUID</code>.
     */
    public void setSessionuid(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>NewF1DB.Sessions.sessionUID</code>.
     */
    public Long getSessionuid() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Sessions.SESSIONS.IDSESSION;
    }

    @Override
    public Field<Long> field2() {
        return Sessions.SESSIONS.SESSIONUID;
    }

    @Override
    public Integer component1() {
        return getIdsession();
    }

    @Override
    public Long component2() {
        return getSessionuid();
    }

    @Override
    public Integer value1() {
        return getIdsession();
    }

    @Override
    public Long value2() {
        return getSessionuid();
    }

    @Override
    public SessionsRecord value1(Integer value) {
        setIdsession(value);
        return this;
    }

    @Override
    public SessionsRecord value2(Long value) {
        setSessionuid(value);
        return this;
    }

    @Override
    public SessionsRecord values(Integer value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SessionsRecord
     */
    public SessionsRecord() {
        super(Sessions.SESSIONS);
    }

    /**
     * Create a detached, initialised SessionsRecord
     */
    public SessionsRecord(Integer idsession, Long sessionuid) {
        super(Sessions.SESSIONS);

        set(0, idsession);
        set(1, sessionuid);
    }
}
