/*
 * This file is generated by jOOQ.
 */
package ndbconn.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import ndbconn.Keys;
import ndbconn.Newf1db;
import ndbconn.tables.records.PacketsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * A table to store common packet information, to avoid reductancy in data 
 * table. This table provides timestamp information for the user to reconstruct 
 * a complete session. 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Packets extends TableImpl<PacketsRecord> {

    private static final long serialVersionUID = -1645204623;

    /**
     * The reference instance of <code>NewF1DB.Packets</code>
     */
    public static final Packets PACKETS = new Packets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PacketsRecord> getRecordType() {
        return PacketsRecord.class;
    }

    /**
     * The column <code>NewF1DB.Packets.idPacket</code>.
     */
    public final TableField<PacketsRecord, Integer> IDPACKET = createField(DSL.name("idPacket"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>NewF1DB.Packets.sessionUID</code>.
     */
    public final TableField<PacketsRecord, Long> SESSIONUID = createField(DSL.name("sessionUID"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>NewF1DB.Packets.packetType</code>.
     */
    public final TableField<PacketsRecord, Byte> PACKETTYPE = createField(DSL.name("packetType"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>NewF1DB.Packets.arriveTime</code>.
     */
    public final TableField<PacketsRecord, LocalDateTime> ARRIVETIME = createField(DSL.name("arriveTime"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>NewF1DB.Packets.sessionTime</code>.
     */
    public final TableField<PacketsRecord, Double> SESSIONTIME = createField(DSL.name("sessionTime"), org.jooq.impl.SQLDataType.FLOAT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    /**
     * Create a <code>NewF1DB.Packets</code> table reference
     */
    public Packets() {
        this(DSL.name("Packets"), null);
    }

    /**
     * Create an aliased <code>NewF1DB.Packets</code> table reference
     */
    public Packets(String alias) {
        this(DSL.name(alias), PACKETS);
    }

    /**
     * Create an aliased <code>NewF1DB.Packets</code> table reference
     */
    public Packets(Name alias) {
        this(alias, PACKETS);
    }

    private Packets(Name alias, Table<PacketsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Packets(Name alias, Table<PacketsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("A table to store common packet information, to avoid reductancy in data table. This table provides timestamp information for the user to reconstruct a complete session. "), TableOptions.table());
    }

    public <O extends Record> Packets(Table<O> child, ForeignKey<O, PacketsRecord> key) {
        super(child, key, PACKETS);
    }

    @Override
    public Schema getSchema() {
        return Newf1db.NEWF1DB;
    }

    @Override
    public Identity<PacketsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PACKETS;
    }

    @Override
    public UniqueKey<PacketsRecord> getPrimaryKey() {
        return Keys.KEY_PACKETS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PacketsRecord>> getKeys() {
        return Arrays.<UniqueKey<PacketsRecord>>asList(Keys.KEY_PACKETS_PRIMARY);
    }

    @Override
    public Packets as(String alias) {
        return new Packets(DSL.name(alias), this);
    }

    @Override
    public Packets as(Name alias) {
        return new Packets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Packets rename(String name) {
        return new Packets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Packets rename(Name name) {
        return new Packets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Long, Byte, LocalDateTime, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
