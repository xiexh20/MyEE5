/*
 * This file is generated by jOOQ.
 */
package dbconn.tables;


import dbconn.F1gamedb;
import dbconn.Indexes;
import dbconn.Keys;
import dbconn.tables.records.SessionbasicsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Basic information of the game session: link player to driver, team, car 
 * used in this session. 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sessionbasics extends TableImpl<SessionbasicsRecord> {

    private static final long serialVersionUID = 868585274;

    /**
     * The reference instance of <code>F1GameDB.SessionBasics</code>
     */
    public static final Sessionbasics SESSIONBASICS = new Sessionbasics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionbasicsRecord> getRecordType() {
        return SessionbasicsRecord.class;
    }

    /**
     * The column <code>F1GameDB.SessionBasics.idSession</code>.
     */
    public final TableField<SessionbasicsRecord, Integer> IDSESSION = createField(DSL.name("idSession"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>F1GameDB.SessionBasics.player</code>.
     */
    public final TableField<SessionbasicsRecord, Integer> PLAYER = createField(DSL.name("player"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>F1GameDB.SessionBasics.driver</code>.
     */
    public final TableField<SessionbasicsRecord, Short> DRIVER = createField(DSL.name("driver"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>F1GameDB.SessionBasics.team</code>.
     */
    public final TableField<SessionbasicsRecord, Short> TEAM = createField(DSL.name("team"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>F1GameDB.SessionBasics.nationality</code>.
     */
    public final TableField<SessionbasicsRecord, Short> NATIONALITY = createField(DSL.name("nationality"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>F1GameDB.SessionBasics.carRaceNr</code>.
     */
    public final TableField<SessionbasicsRecord, Short> CARRACENR = createField(DSL.name("carRaceNr"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>F1GameDB.SessionBasics.time</code>.
     */
    public final TableField<SessionbasicsRecord, LocalDateTime> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>F1GameDB.SessionBasics</code> table reference
     */
    public Sessionbasics() {
        this(DSL.name("SessionBasics"), null);
    }

    /**
     * Create an aliased <code>F1GameDB.SessionBasics</code> table reference
     */
    public Sessionbasics(String alias) {
        this(DSL.name(alias), SESSIONBASICS);
    }

    /**
     * Create an aliased <code>F1GameDB.SessionBasics</code> table reference
     */
    public Sessionbasics(Name alias) {
        this(alias, SESSIONBASICS);
    }

    private Sessionbasics(Name alias, Table<SessionbasicsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sessionbasics(Name alias, Table<SessionbasicsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Basic information of the game session: link player to driver, team, car used in this session. "), TableOptions.table());
    }

    public <O extends Record> Sessionbasics(Table<O> child, ForeignKey<O, SessionbasicsRecord> key) {
        super(child, key, SESSIONBASICS);
    }

    @Override
    public Schema getSchema() {
        return F1gamedb.F1GAMEDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SESSIONBASICS_BASIC2DRIVER_IDX, Indexes.SESSIONBASICS_BASIC2NATIONALITY_IDX, Indexes.SESSIONBASICS_BASIC2PLAYER_IDX, Indexes.SESSIONBASICS_BASIC2TEAM_IDX);
    }

    @Override
    public Identity<SessionbasicsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SESSIONBASICS;
    }

    @Override
    public UniqueKey<SessionbasicsRecord> getPrimaryKey() {
        return Keys.KEY_SESSIONBASICS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SessionbasicsRecord>> getKeys() {
        return Arrays.<UniqueKey<SessionbasicsRecord>>asList(Keys.KEY_SESSIONBASICS_PRIMARY);
    }

    @Override
    public List<ForeignKey<SessionbasicsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SessionbasicsRecord, ?>>asList(Keys.BASIC2PLAYER, Keys.BASIC2DRIVER, Keys.BASIC2TEAM, Keys.BASIC2NATIONALITY);
    }

    public Players players() {
        return new Players(this, Keys.BASIC2PLAYER);
    }

    public Drivers drivers() {
        return new Drivers(this, Keys.BASIC2DRIVER);
    }

    public Teams teams() {
        return new Teams(this, Keys.BASIC2TEAM);
    }

    public Nationalities nationalities() {
        return new Nationalities(this, Keys.BASIC2NATIONALITY);
    }

    @Override
    public Sessionbasics as(String alias) {
        return new Sessionbasics(DSL.name(alias), this);
    }

    @Override
    public Sessionbasics as(Name alias) {
        return new Sessionbasics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessionbasics rename(String name) {
        return new Sessionbasics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessionbasics rename(Name name) {
        return new Sessionbasics(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Short, Short, Short, Short, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
