/*
 * This file is generated by jOOQ.
 */
package dbconn.tables;


import dbconn.F1gamedb;
import dbconn.Keys;
import dbconn.tables.records.DriversRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Store names of all drivers specified by F1 2018.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Drivers extends TableImpl<DriversRecord> {

    private static final long serialVersionUID = -306896799;

    /**
     * The reference instance of <code>F1GameDB.Drivers</code>
     */
    public static final Drivers DRIVERS = new Drivers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DriversRecord> getRecordType() {
        return DriversRecord.class;
    }

    /**
     * The column <code>F1GameDB.Drivers.idDriver</code>.
     */
    public final TableField<DriversRecord, Short> IDDRIVER = createField(DSL.name("idDriver"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>F1GameDB.Drivers.driverName</code>.
     */
    public final TableField<DriversRecord, String> DRIVERNAME = createField(DSL.name("driverName"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>F1GameDB.Drivers</code> table reference
     */
    public Drivers() {
        this(DSL.name("Drivers"), null);
    }

    /**
     * Create an aliased <code>F1GameDB.Drivers</code> table reference
     */
    public Drivers(String alias) {
        this(DSL.name(alias), DRIVERS);
    }

    /**
     * Create an aliased <code>F1GameDB.Drivers</code> table reference
     */
    public Drivers(Name alias) {
        this(alias, DRIVERS);
    }

    private Drivers(Name alias, Table<DriversRecord> aliased) {
        this(alias, aliased, null);
    }

    private Drivers(Name alias, Table<DriversRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Store names of all drivers specified by F1 2018."), TableOptions.table());
    }

    public <O extends Record> Drivers(Table<O> child, ForeignKey<O, DriversRecord> key) {
        super(child, key, DRIVERS);
    }

    @Override
    public Schema getSchema() {
        return F1gamedb.F1GAMEDB;
    }

    @Override
    public Identity<DriversRecord, Short> getIdentity() {
        return Keys.IDENTITY_DRIVERS;
    }

    @Override
    public UniqueKey<DriversRecord> getPrimaryKey() {
        return Keys.KEY_DRIVERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<DriversRecord>> getKeys() {
        return Arrays.<UniqueKey<DriversRecord>>asList(Keys.KEY_DRIVERS_PRIMARY);
    }

    @Override
    public Drivers as(String alias) {
        return new Drivers(DSL.name(alias), this);
    }

    @Override
    public Drivers as(Name alias) {
        return new Drivers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Drivers rename(String name) {
        return new Drivers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Drivers rename(Name name) {
        return new Drivers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Short, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
