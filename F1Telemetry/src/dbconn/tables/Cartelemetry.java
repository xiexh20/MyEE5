/*
 * This file is generated by jOOQ.
 */
package dbconn.tables;


import dbconn.F1gamedb;
import dbconn.Keys;
import dbconn.tables.records.CartelemetryRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * From packet telmetry, should be updated as fast as possible
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cartelemetry extends TableImpl<CartelemetryRecord> {

    private static final long serialVersionUID = 2047677921;

    /**
     * The reference instance of <code>F1GameDB.CarTelemetry</code>
     */
    public static final Cartelemetry CARTELEMETRY = new Cartelemetry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CartelemetryRecord> getRecordType() {
        return CartelemetryRecord.class;
    }

    /**
     * The column <code>F1GameDB.CarTelemetry.idCarTelemetry</code>.
     */
    public final TableField<CartelemetryRecord, Integer> IDCARTELEMETRY = createField(DSL.name("idCarTelemetry"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>F1GameDB.CarTelemetry.sessionId</code>.
     */
    public final TableField<CartelemetryRecord, Long> SESSIONID = createField(DSL.name("sessionId"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>F1GameDB.CarTelemetry.sessionTime</code>.
     */
    public final TableField<CartelemetryRecord, Double> SESSIONTIME = createField(DSL.name("sessionTime"), org.jooq.impl.SQLDataType.FLOAT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>F1GameDB.CarTelemetry.speed</code>.
     */
    public final TableField<CartelemetryRecord, Integer> SPEED = createField(DSL.name("speed"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>F1GameDB.CarTelemetry.throttle</code>.
     */
    public final TableField<CartelemetryRecord, Short> THROTTLE = createField(DSL.name("throttle"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>F1GameDB.CarTelemetry.steer</code>.
     */
    public final TableField<CartelemetryRecord, Short> STEER = createField(DSL.name("steer"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>F1GameDB.CarTelemetry.brake</code>.
     */
    public final TableField<CartelemetryRecord, Short> BRAKE = createField(DSL.name("brake"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>F1GameDB.CarTelemetry.gear</code>.
     */
    public final TableField<CartelemetryRecord, Byte> GEAR = createField(DSL.name("gear"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>F1GameDB.CarTelemetry.drs</code>.
     */
    public final TableField<CartelemetryRecord, Byte> DRS = createField(DSL.name("drs"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>F1GameDB.CarTelemetry</code> table reference
     */
    public Cartelemetry() {
        this(DSL.name("CarTelemetry"), null);
    }

    /**
     * Create an aliased <code>F1GameDB.CarTelemetry</code> table reference
     */
    public Cartelemetry(String alias) {
        this(DSL.name(alias), CARTELEMETRY);
    }

    /**
     * Create an aliased <code>F1GameDB.CarTelemetry</code> table reference
     */
    public Cartelemetry(Name alias) {
        this(alias, CARTELEMETRY);
    }

    private Cartelemetry(Name alias, Table<CartelemetryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cartelemetry(Name alias, Table<CartelemetryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("From packet telmetry, should be updated as fast as possible"), TableOptions.table());
    }

    public <O extends Record> Cartelemetry(Table<O> child, ForeignKey<O, CartelemetryRecord> key) {
        super(child, key, CARTELEMETRY);
    }

    @Override
    public Schema getSchema() {
        return F1gamedb.F1GAMEDB;
    }

    @Override
    public Identity<CartelemetryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CARTELEMETRY;
    }

    @Override
    public UniqueKey<CartelemetryRecord> getPrimaryKey() {
        return Keys.KEY_CARTELEMETRY_PRIMARY;
    }

    @Override
    public List<UniqueKey<CartelemetryRecord>> getKeys() {
        return Arrays.<UniqueKey<CartelemetryRecord>>asList(Keys.KEY_CARTELEMETRY_PRIMARY);
    }

    @Override
    public Cartelemetry as(String alias) {
        return new Cartelemetry(DSL.name(alias), this);
    }

    @Override
    public Cartelemetry as(Name alias) {
        return new Cartelemetry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cartelemetry rename(String name) {
        return new Cartelemetry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cartelemetry rename(Name name) {
        return new Cartelemetry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Long, Double, Integer, Short, Short, Short, Byte, Byte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
