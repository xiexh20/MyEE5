/*
 * This file is generated by jOOQ.
 */
package dbconn.tables;


import dbconn.F1gamedb;
import dbconn.Keys;
import dbconn.tables.records.SessionperformanceRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Information related to the performance during a session: max speed, lap 
 * time, etc. 
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sessionperformance extends TableImpl<SessionperformanceRecord> {

    private static final long serialVersionUID = -2028875365;

    /**
     * The reference instance of <code>F1GameDB.SessionPerformance</code>
     */
    public static final Sessionperformance SESSIONPERFORMANCE = new Sessionperformance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionperformanceRecord> getRecordType() {
        return SessionperformanceRecord.class;
    }

    /**
     * The column <code>F1GameDB.SessionPerformance.senssionId</code>.
     */
    public final TableField<SessionperformanceRecord, Integer> SENSSIONID = createField(DSL.name("senssionId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>F1GameDB.SessionPerformance.maxSpeed</code>.
     */
    public final TableField<SessionperformanceRecord, BigDecimal> MAXSPEED = createField(DSL.name("maxSpeed"), org.jooq.impl.SQLDataType.DECIMAL(6, 2).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>F1GameDB.SessionPerformance.slowestLap</code>.
     */
    public final TableField<SessionperformanceRecord, Byte> SLOWESTLAP = createField(DSL.name("slowestLap"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>F1GameDB.SessionPerformance.maxLapTime</code>.
     */
    public final TableField<SessionperformanceRecord, Integer> MAXLAPTIME = createField(DSL.name("maxLapTime"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>F1GameDB.SessionPerformance.fastestLap</code>.
     */
    public final TableField<SessionperformanceRecord, Byte> FASTESTLAP = createField(DSL.name("fastestLap"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>F1GameDB.SessionPerformance.minLapTime</code>.
     */
    public final TableField<SessionperformanceRecord, Integer> MINLAPTIME = createField(DSL.name("minLapTime"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>F1GameDB.SessionPerformance.avgSpeed</code>.
     */
    public final TableField<SessionperformanceRecord, BigDecimal> AVGSPEED = createField(DSL.name("avgSpeed"), org.jooq.impl.SQLDataType.DECIMAL(6, 2).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * Create a <code>F1GameDB.SessionPerformance</code> table reference
     */
    public Sessionperformance() {
        this(DSL.name("SessionPerformance"), null);
    }

    /**
     * Create an aliased <code>F1GameDB.SessionPerformance</code> table reference
     */
    public Sessionperformance(String alias) {
        this(DSL.name(alias), SESSIONPERFORMANCE);
    }

    /**
     * Create an aliased <code>F1GameDB.SessionPerformance</code> table reference
     */
    public Sessionperformance(Name alias) {
        this(alias, SESSIONPERFORMANCE);
    }

    private Sessionperformance(Name alias, Table<SessionperformanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sessionperformance(Name alias, Table<SessionperformanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Information related to the performance during a session: max speed, lap time, etc. "), TableOptions.table());
    }

    public <O extends Record> Sessionperformance(Table<O> child, ForeignKey<O, SessionperformanceRecord> key) {
        super(child, key, SESSIONPERFORMANCE);
    }

    @Override
    public Schema getSchema() {
        return F1gamedb.F1GAMEDB;
    }

    @Override
    public UniqueKey<SessionperformanceRecord> getPrimaryKey() {
        return Keys.KEY_SESSIONPERFORMANCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<SessionperformanceRecord>> getKeys() {
        return Arrays.<UniqueKey<SessionperformanceRecord>>asList(Keys.KEY_SESSIONPERFORMANCE_PRIMARY);
    }

    @Override
    public List<ForeignKey<SessionperformanceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SessionperformanceRecord, ?>>asList(Keys.PERFORM2SESSIONID);
    }

    public Sessionbasics sessionbasics() {
        return new Sessionbasics(this, Keys.PERFORM2SESSIONID);
    }

    @Override
    public Sessionperformance as(String alias) {
        return new Sessionperformance(DSL.name(alias), this);
    }

    @Override
    public Sessionperformance as(Name alias) {
        return new Sessionperformance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessionperformance rename(String name) {
        return new Sessionperformance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessionperformance rename(Name name) {
        return new Sessionperformance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, BigDecimal, Byte, Integer, Byte, Integer, BigDecimal> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
