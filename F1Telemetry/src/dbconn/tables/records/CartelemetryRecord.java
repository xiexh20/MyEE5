/*
 * This file is generated by jOOQ.
 */
package dbconn.tables.records;


import dbconn.tables.Cartelemetry;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * From packet telmetry, should be updated as fast as possible
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CartelemetryRecord extends UpdatableRecordImpl<CartelemetryRecord> implements Record9<Integer, Long, Double, Integer, Short, Short, Short, Byte, Byte> {

    private static final long serialVersionUID = -1392324393;

    /**
     * Setter for <code>F1GameDB.CarTelemetry.idCarTelemetry</code>.
     */
    public void setIdcartelemetry(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>F1GameDB.CarTelemetry.idCarTelemetry</code>.
     */
    public Integer getIdcartelemetry() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>F1GameDB.CarTelemetry.sessionId</code>.
     */
    public void setSessionid(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>F1GameDB.CarTelemetry.sessionId</code>.
     */
    public Long getSessionid() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>F1GameDB.CarTelemetry.sessionTime</code>.
     */
    public void setSessiontime(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>F1GameDB.CarTelemetry.sessionTime</code>.
     */
    public Double getSessiontime() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>F1GameDB.CarTelemetry.speed</code>.
     */
    public void setSpeed(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>F1GameDB.CarTelemetry.speed</code>.
     */
    public Integer getSpeed() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>F1GameDB.CarTelemetry.throttle</code>.
     */
    public void setThrottle(Short value) {
        set(4, value);
    }

    /**
     * Getter for <code>F1GameDB.CarTelemetry.throttle</code>.
     */
    public Short getThrottle() {
        return (Short) get(4);
    }

    /**
     * Setter for <code>F1GameDB.CarTelemetry.steer</code>.
     */
    public void setSteer(Short value) {
        set(5, value);
    }

    /**
     * Getter for <code>F1GameDB.CarTelemetry.steer</code>.
     */
    public Short getSteer() {
        return (Short) get(5);
    }

    /**
     * Setter for <code>F1GameDB.CarTelemetry.brake</code>.
     */
    public void setBrake(Short value) {
        set(6, value);
    }

    /**
     * Getter for <code>F1GameDB.CarTelemetry.brake</code>.
     */
    public Short getBrake() {
        return (Short) get(6);
    }

    /**
     * Setter for <code>F1GameDB.CarTelemetry.gear</code>.
     */
    public void setGear(Byte value) {
        set(7, value);
    }

    /**
     * Getter for <code>F1GameDB.CarTelemetry.gear</code>.
     */
    public Byte getGear() {
        return (Byte) get(7);
    }

    /**
     * Setter for <code>F1GameDB.CarTelemetry.drs</code>.
     */
    public void setDrs(Byte value) {
        set(8, value);
    }

    /**
     * Getter for <code>F1GameDB.CarTelemetry.drs</code>.
     */
    public Byte getDrs() {
        return (Byte) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Long, Double, Integer, Short, Short, Short, Byte, Byte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Integer, Long, Double, Integer, Short, Short, Short, Byte, Byte> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Cartelemetry.CARTELEMETRY.IDCARTELEMETRY;
    }

    @Override
    public Field<Long> field2() {
        return Cartelemetry.CARTELEMETRY.SESSIONID;
    }

    @Override
    public Field<Double> field3() {
        return Cartelemetry.CARTELEMETRY.SESSIONTIME;
    }

    @Override
    public Field<Integer> field4() {
        return Cartelemetry.CARTELEMETRY.SPEED;
    }

    @Override
    public Field<Short> field5() {
        return Cartelemetry.CARTELEMETRY.THROTTLE;
    }

    @Override
    public Field<Short> field6() {
        return Cartelemetry.CARTELEMETRY.STEER;
    }

    @Override
    public Field<Short> field7() {
        return Cartelemetry.CARTELEMETRY.BRAKE;
    }

    @Override
    public Field<Byte> field8() {
        return Cartelemetry.CARTELEMETRY.GEAR;
    }

    @Override
    public Field<Byte> field9() {
        return Cartelemetry.CARTELEMETRY.DRS;
    }

    @Override
    public Integer component1() {
        return getIdcartelemetry();
    }

    @Override
    public Long component2() {
        return getSessionid();
    }

    @Override
    public Double component3() {
        return getSessiontime();
    }

    @Override
    public Integer component4() {
        return getSpeed();
    }

    @Override
    public Short component5() {
        return getThrottle();
    }

    @Override
    public Short component6() {
        return getSteer();
    }

    @Override
    public Short component7() {
        return getBrake();
    }

    @Override
    public Byte component8() {
        return getGear();
    }

    @Override
    public Byte component9() {
        return getDrs();
    }

    @Override
    public Integer value1() {
        return getIdcartelemetry();
    }

    @Override
    public Long value2() {
        return getSessionid();
    }

    @Override
    public Double value3() {
        return getSessiontime();
    }

    @Override
    public Integer value4() {
        return getSpeed();
    }

    @Override
    public Short value5() {
        return getThrottle();
    }

    @Override
    public Short value6() {
        return getSteer();
    }

    @Override
    public Short value7() {
        return getBrake();
    }

    @Override
    public Byte value8() {
        return getGear();
    }

    @Override
    public Byte value9() {
        return getDrs();
    }

    @Override
    public CartelemetryRecord value1(Integer value) {
        setIdcartelemetry(value);
        return this;
    }

    @Override
    public CartelemetryRecord value2(Long value) {
        setSessionid(value);
        return this;
    }

    @Override
    public CartelemetryRecord value3(Double value) {
        setSessiontime(value);
        return this;
    }

    @Override
    public CartelemetryRecord value4(Integer value) {
        setSpeed(value);
        return this;
    }

    @Override
    public CartelemetryRecord value5(Short value) {
        setThrottle(value);
        return this;
    }

    @Override
    public CartelemetryRecord value6(Short value) {
        setSteer(value);
        return this;
    }

    @Override
    public CartelemetryRecord value7(Short value) {
        setBrake(value);
        return this;
    }

    @Override
    public CartelemetryRecord value8(Byte value) {
        setGear(value);
        return this;
    }

    @Override
    public CartelemetryRecord value9(Byte value) {
        setDrs(value);
        return this;
    }

    @Override
    public CartelemetryRecord values(Integer value1, Long value2, Double value3, Integer value4, Short value5, Short value6, Short value7, Byte value8, Byte value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CartelemetryRecord
     */
    public CartelemetryRecord() {
        super(Cartelemetry.CARTELEMETRY);
    }

    /**
     * Create a detached, initialised CartelemetryRecord
     */
    public CartelemetryRecord(Integer idcartelemetry, Long sessionid, Double sessiontime, Integer speed, Short throttle, Short steer, Short brake, Byte gear, Byte drs) {
        super(Cartelemetry.CARTELEMETRY);

        set(0, idcartelemetry);
        set(1, sessionid);
        set(2, sessiontime);
        set(3, speed);
        set(4, throttle);
        set(5, steer);
        set(6, brake);
        set(7, gear);
        set(8, drs);
    }
}
