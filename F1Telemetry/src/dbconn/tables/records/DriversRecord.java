/*
 * This file is generated by jOOQ.
 */
package dbconn.tables.records;


import dbconn.tables.Drivers;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Store names of all drivers specified by F1 2018.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DriversRecord extends UpdatableRecordImpl<DriversRecord> implements Record2<Short, String> {

    private static final long serialVersionUID = 693117088;

    /**
     * Setter for <code>F1GameDB.Drivers.idDriver</code>.
     */
    public void setIddriver(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>F1GameDB.Drivers.idDriver</code>.
     */
    public Short getIddriver() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>F1GameDB.Drivers.driverName</code>.
     */
    public void setDrivername(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>F1GameDB.Drivers.driverName</code>.
     */
    public String getDrivername() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Short, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Short, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return Drivers.DRIVERS.IDDRIVER;
    }

    @Override
    public Field<String> field2() {
        return Drivers.DRIVERS.DRIVERNAME;
    }

    @Override
    public Short component1() {
        return getIddriver();
    }

    @Override
    public String component2() {
        return getDrivername();
    }

    @Override
    public Short value1() {
        return getIddriver();
    }

    @Override
    public String value2() {
        return getDrivername();
    }

    @Override
    public DriversRecord value1(Short value) {
        setIddriver(value);
        return this;
    }

    @Override
    public DriversRecord value2(String value) {
        setDrivername(value);
        return this;
    }

    @Override
    public DriversRecord values(Short value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DriversRecord
     */
    public DriversRecord() {
        super(Drivers.DRIVERS);
    }

    /**
     * Create a detached, initialised DriversRecord
     */
    public DriversRecord(Short iddriver, String drivername) {
        super(Drivers.DRIVERS);

        set(0, iddriver);
        set(1, drivername);
    }
}
