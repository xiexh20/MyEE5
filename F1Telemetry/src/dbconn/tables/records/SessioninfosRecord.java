/*
 * This file is generated by jOOQ.
 */
package dbconn.tables.records;


import dbconn.tables.Sessioninfos;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * General information for this session
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessioninfosRecord extends UpdatableRecordImpl<SessioninfosRecord> implements Record8<Long, LocalDateTime, LocalDateTime, Short, Integer, Integer, Short, Integer> {

    private static final long serialVersionUID = 838539547;

    /**
     * Setter for <code>F1GameDB.SessionInfos.sessionUID</code>.
     */
    public void setSessionuid(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>F1GameDB.SessionInfos.sessionUID</code>.
     */
    public Long getSessionuid() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>F1GameDB.SessionInfos.startTime</code>.
     */
    public void setStarttime(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>F1GameDB.SessionInfos.startTime</code>.
     */
    public LocalDateTime getStarttime() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>F1GameDB.SessionInfos.endTime</code>.
     */
    public void setEndtime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>F1GameDB.SessionInfos.endTime</code>.
     */
    public LocalDateTime getEndtime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>F1GameDB.SessionInfos.trackId</code>.
     */
    public void setTrackid(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>F1GameDB.SessionInfos.trackId</code>.
     */
    public Short getTrackid() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>F1GameDB.SessionInfos.pitSpeedLimit</code>.
     */
    public void setPitspeedlimit(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>F1GameDB.SessionInfos.pitSpeedLimit</code>.
     */
    public Integer getPitspeedlimit() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>F1GameDB.SessionInfos.duration</code>.
     */
    public void setDuration(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>F1GameDB.SessionInfos.duration</code>.
     */
    public Integer getDuration() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>F1GameDB.SessionInfos.totalLaps</code>.
     */
    public void setTotallaps(Short value) {
        set(6, value);
    }

    /**
     * Getter for <code>F1GameDB.SessionInfos.totalLaps</code>.
     */
    public Short getTotallaps() {
        return (Short) get(6);
    }

    /**
     * Setter for <code>F1GameDB.SessionInfos.trackLength</code>.
     */
    public void setTracklength(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>F1GameDB.SessionInfos.trackLength</code>.
     */
    public Integer getTracklength() {
        return (Integer) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, LocalDateTime, LocalDateTime, Short, Integer, Integer, Short, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, LocalDateTime, LocalDateTime, Short, Integer, Integer, Short, Integer> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Sessioninfos.SESSIONINFOS.SESSIONUID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Sessioninfos.SESSIONINFOS.STARTTIME;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Sessioninfos.SESSIONINFOS.ENDTIME;
    }

    @Override
    public Field<Short> field4() {
        return Sessioninfos.SESSIONINFOS.TRACKID;
    }

    @Override
    public Field<Integer> field5() {
        return Sessioninfos.SESSIONINFOS.PITSPEEDLIMIT;
    }

    @Override
    public Field<Integer> field6() {
        return Sessioninfos.SESSIONINFOS.DURATION;
    }

    @Override
    public Field<Short> field7() {
        return Sessioninfos.SESSIONINFOS.TOTALLAPS;
    }

    @Override
    public Field<Integer> field8() {
        return Sessioninfos.SESSIONINFOS.TRACKLENGTH;
    }

    @Override
    public Long component1() {
        return getSessionuid();
    }

    @Override
    public LocalDateTime component2() {
        return getStarttime();
    }

    @Override
    public LocalDateTime component3() {
        return getEndtime();
    }

    @Override
    public Short component4() {
        return getTrackid();
    }

    @Override
    public Integer component5() {
        return getPitspeedlimit();
    }

    @Override
    public Integer component6() {
        return getDuration();
    }

    @Override
    public Short component7() {
        return getTotallaps();
    }

    @Override
    public Integer component8() {
        return getTracklength();
    }

    @Override
    public Long value1() {
        return getSessionuid();
    }

    @Override
    public LocalDateTime value2() {
        return getStarttime();
    }

    @Override
    public LocalDateTime value3() {
        return getEndtime();
    }

    @Override
    public Short value4() {
        return getTrackid();
    }

    @Override
    public Integer value5() {
        return getPitspeedlimit();
    }

    @Override
    public Integer value6() {
        return getDuration();
    }

    @Override
    public Short value7() {
        return getTotallaps();
    }

    @Override
    public Integer value8() {
        return getTracklength();
    }

    @Override
    public SessioninfosRecord value1(Long value) {
        setSessionuid(value);
        return this;
    }

    @Override
    public SessioninfosRecord value2(LocalDateTime value) {
        setStarttime(value);
        return this;
    }

    @Override
    public SessioninfosRecord value3(LocalDateTime value) {
        setEndtime(value);
        return this;
    }

    @Override
    public SessioninfosRecord value4(Short value) {
        setTrackid(value);
        return this;
    }

    @Override
    public SessioninfosRecord value5(Integer value) {
        setPitspeedlimit(value);
        return this;
    }

    @Override
    public SessioninfosRecord value6(Integer value) {
        setDuration(value);
        return this;
    }

    @Override
    public SessioninfosRecord value7(Short value) {
        setTotallaps(value);
        return this;
    }

    @Override
    public SessioninfosRecord value8(Integer value) {
        setTracklength(value);
        return this;
    }

    @Override
    public SessioninfosRecord values(Long value1, LocalDateTime value2, LocalDateTime value3, Short value4, Integer value5, Integer value6, Short value7, Integer value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SessioninfosRecord
     */
    public SessioninfosRecord() {
        super(Sessioninfos.SESSIONINFOS);
    }

    /**
     * Create a detached, initialised SessioninfosRecord
     */
    public SessioninfosRecord(Long sessionuid, LocalDateTime starttime, LocalDateTime endtime, Short trackid, Integer pitspeedlimit, Integer duration, Short totallaps, Integer tracklength) {
        super(Sessioninfos.SESSIONINFOS);

        set(0, sessionuid);
        set(1, starttime);
        set(2, endtime);
        set(3, trackid);
        set(4, pitspeedlimit);
        set(5, duration);
        set(6, totallaps);
        set(7, tracklength);
    }
}
